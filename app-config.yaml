app:
  title: Backstage App
  baseUrl: http://192.168.100.1:7007

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  auth:
    keys:
      - secret: ${BACKEND_SECRET}
  baseUrl: http://192.168.100.1:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    # We're disabling upgrade-insecure-requests because we're not running behind
    # a TLS-terminating proxy.
    upgrade-insecure-requests: false
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: http://192.168.100.1:7007
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  # database:
  #   client: pg
  #   connection:
  #     host: ${POSTGRES_HOST}
  #     port: ${POSTGRES_PORT}
  #     user: ${POSTGRES_USER}
  #     password: ${POSTGRES_PASSWORD}
  #     # https://node-postgres.com/features/ssl
  #     # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
  #     # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
  #     # ssl:
  #     #   ca: # if you have a CA file and want to verify it you can uncomment this section
  #     #     $file: <file-path>/ca/server.crt

  # config options: https://node-postgres.com/apis/client
  database:
    client: better-sqlite3
    connection:
      # Backstage will create a database file for each plugin in this directory.
      directory: /tmp/backstage-dbs

integrations:
  # github:
  #   - host: github.com
  #     # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
  #     # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
  #     token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
          resolver: usernameMatchingUserEntityName
    guest:
      dangerouslyAllowOutsideDevelopment: true

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ./examples/entities.yaml

    # Local example template
    - type: file
      target: ./examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ./examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: https://127.0.0.1:6443 # Replace with your k3s API server URL
          name: local-k3s
          title: 'Local K3s Cluster'
          authProvider: 'serviceAccount'
          skipTLSVerify: true # Set to true for local development if you don't have a proper CA
          # serviceAccountToken: ${K8S_K3S_TOKEN} # Environment variable for your service account token
          # caData: ${K8S_K3S_CA_DATA} # Optional: Base64-encoded CA certificate data
          # caFile: '/path/to/your/k3s-ca.crt' # Optional: Path to your CA certificate file

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
